import binascii
import os

from pathlib import Path
from shutil import rmtree
from pdf_extractor import Extractor
from img2img_encoder import Encoder
from img2img_decoder import Decoder
from AES import AESCipher
from qr_generator import QR
from pdf_template import PdfTemplate
from text2img_encoder import TextEncoder
from text2img_decoder import TextDecoder
import cv2
import random
import fitz

correct_pin=False

while (1):

    print("[1] Encode")
    print("[2] Extract Images")
    print("[3] Decode Info")
    print("[4] Exit")

    option = input("Choose one of the options above: ")

    if option == "1":

        path = str(Path.cwd()) + '/images/'

        path_coldplay_image = path + 'coldplay_image.png'
        path_coldplay_qr = path + 'coldplay_qr.png'

        #1. Read the content of a file we want to hide
        print("Encoding")

        file_name_to_hide = input("Introduce the file name which content you want to encode: ")
        with open(file_name_to_hide, 'r') as file:
            content = file.read()
        
        #2. Generate a random key
        random_key = os.urandom(16)
        random_key_str = binascii.hexlify(random_key).decode('utf-8')
        print("Random key:", random_key_str)

        #3. Encrypt the contents of the file with this random key
        AESCipher.init(random_key_str)
        ciphered_content = AESCipher.encrypt(content).decode()
        #print("Ciphered content with key", ciphered_content)

        #4. Generate a random PIN code for the user to unlock the information
        random_number = random.randint(0, 9999)
        number_with_format = "{:04d}".format(random_number)
        print("The verification PIN Code is: " + number_with_format)

        #5. Insert the encrypted key into a QR generated by us.
        qr_name_path = path + "qr_random_key.png"
        QR.generate_qr(random_key_str, qr_name_path)

        #6. Insert the generated QR inside the QR that redirects to the Coldplay website.
        img_visible_path = path + 'coldplay_qr.png'
        img_hiden_path = qr_name_path 
        output_path = path + 'qr_coldplay_hidden.png'
        Encoder.hide_image(img_visible_path, img_hiden_path, output_path)

        #7. Hide the file content in the main PDF image
        path_coldplay_image_hidden = path + 'coldplay_image_hidden.png'
        TextEncoder.hide(ciphered_content, path_coldplay_image, path_coldplay_image_hidden)

        #8. Generate PDF file that contains the image, the QR code, and the PIN code
        pdf_name = input("Introduce the PDF name to generate: ")
        path_coldplay_image_hidden = path + 'coldplay_image_hidden.png'
        path_qr_coldplay_hidden = path + 'qr_coldplay_hidden.png'
        PdfTemplate.create(pdf_name, path_coldplay_image_hidden, path_qr_coldplay_hidden, number_with_format)

        print("The message was hidden correctly in the PDF file generated")

        # Remove tmp files
        os.remove(path_coldplay_image_hidden)
        os.remove(path_qr_coldplay_hidden)
        os.remove(qr_name_path)

    elif option == "2":
        print("Extracting images from PDF file")

        #1. Read the PDF filename to decode
        pdf_name = input("Introduce the PDF file name to decode: ")

        #2. User introduce Verification PIN generated in the Encoding of the file
        user_key = input("Introduce the user PIN to decrypt the random key: ")

        #3. Check if Verification Code is the same with the one stored in the PDF
        doc = fitz.open(pdf_name)
        text = ""
        for page in doc:
            text+=page.get_text()

        text_array = text.split("\n")
        fecha = text_array[2]
        hora = text_array[4]
        lugar = text_array[6]
        precio = text_array[8]

        digits=""


        digits+=str(fecha.count(" "))
        digits+=str(hora.count(" "))
        digits+=str(lugar.count(" "))
        digits+=str(precio.count(" "))

        if user_key!=digits:
            print("PIN Code does not match, try again")
        
        else:
            correct_pin=True

            #4. Extract background image and QR
            Extractor.extractImages(pdf_name)
            print("Images extracted at ./tmp folder")
            
    elif option=="3":

        #1. Check if Verification PIN is correct and introduce QR image to extract info
        if correct_pin:
            qr_path=input("Go to tmp folder and write the number associated with QR Code (just the number, not the extension): ")

            tmp_path = "tmp/"
            image_tmp_path="" 
            qr_tmp_path=""

            if qr_path=="1":
                image_tmp_path = tmp_path + "2.png"
                qr_tmp_path = tmp_path + "1.png"

            elif qr_path=="2":
                image_tmp_path = tmp_path + "1.png"
                qr_tmp_path = tmp_path + "2.png"


            #2. Extract hidden QR (stores the random key to decipher the hidden content inside the image) from the visible QR
            qr_ciphered_path = tmp_path + "qr_random_key.png"
            Decoder.extract_hidden_image(qr_tmp_path, qr_ciphered_path)

            #3. Read the hidden QR Code to obtain the key to decipher the information hidden in the image
            img = cv2.imread(qr_ciphered_path)
            det = cv2.QRCodeDetector()
            random_key_clear, pts, st_code = det.detectAndDecode(img)
            print("Random key hidden in QR: ", random_key_clear)

            #4. Extract hidden content in the image
            text_ciphered = TextDecoder.read(image_tmp_path)
            
            #5. Decipher the content that was hidden in the image
            AESCipher.init(random_key_clear)
            text_clear = AESCipher.decrypt(text_ciphered)
            print("The secret is:\n", text_clear)
            print("\n")

            #6. Remove tmp generated files
            rmtree("tmp")



    else:
        exit()
        