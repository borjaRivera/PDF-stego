import binascii
import os

from pathlib import Path
from shutil import rmtree
from pdf_extractor import Extractor
from img2img_encoder import Encoder
from img2img_decoder import Decoder
from AES import AESCipher
from qr_generator import QR
from pdf_template import PdfTemplate
from text2img_encoder import TextEncoder
from text2img_decoder import TextDecoder
import cv2


while (1):

    print("[1] Encode")
    print("[2] Decode")
    print("[3] Exit")

    option = input("Choose one of the options above: ")

    if option == "1":

        path = str(Path.cwd()) + '/images/'

        path_coldplay_image = path + 'coldplay_image.png'
        path_coldplay_qr = path + 'coldplay_qr.png'

        #1. Read the content of a file we want to hide
        print("Encoding")

        file_name_to_hide = input("Introduce the file name which content you want to encode: ")
        with open(file_name_to_hide, 'rb') as file:
            content = file.read()
        
        #2. Generate a random key
        random_key = os.urandom(16)
        random_key_str = binascii.hexlify(random_key).decode('utf-8')
        print("Random key:", random_key_str)

        #3. Encrypt the contents of the file with this random key
        AESCipher.init(random_key_str)
        ciphered_content = AESCipher.encrypt(content).decode()
        print("Ciphered content with key", ciphered_content)

        #4. Encrypt the random key with a key entered by the user.
        user_key = input("Introduce a key to cipher: ")
        AESCipher.init(user_key)
        random_key_ciphered = AESCipher.encrypt(random_key_str).decode()
        print("Random key ciphered:", random_key_ciphered)

        #5. Insert the encrypted key into a QR generated by us.
        qr_name_path = path + "qr_random_key_ciphered.png"
        QR.generate_qr(random_key_ciphered, qr_name_path)

        #6. Insert the generated QR inside the QR that redirects to the Coldplay website.


        img_visible_path = path + 'coldplay_qr.png'
        img_hiden_path = qr_name_path 
        output_path = path + 'qr_coldplay_hidden.png'
        Encoder.hide_image(img_visible_path, img_hiden_path, output_path)
        print("Ocultado el QR")

        #7. Hide the file content in the main PDF image
        path_coldplay_image_hidden = path + 'coldplay_image_hidden.png'
        TextEncoder.ocultar_texto(ciphered_content, path_coldplay_image, path_coldplay_image_hidden)

        #8. Generamos el PDF con el QR que contiene el otro QR y la imagen donde vamos a ocultar el mensaje principal
        pdf_name = input("Introduce the PDF name to generate: ")
        path_coldplay_image_hidden = path + 'coldplay_image_hidden.png'
        path_qr_coldplay_hidden = path + 'qr_coldplay_hidden.png'
        PdfTemplate.create(pdf_name, path_coldplay_image_hidden, path_qr_coldplay_hidden)

        print("El contenido del archivo que has propocionado se ha ocultado en el PDF creado.")

        # Remove tmp files
        os.remove(path_coldplay_image_hidden)
        os.remove(path_qr_coldplay_hidden)
        os.remove(qr_name_path)

    elif option == "2":
        print("Decoding")

        #1. Leer el pdf que el usuario quiere decodificar
        pdf_name = input("Introduce the PDF file name to decode: ")

        #2. Extract background image and QR
        Extractor.extractImages(pdf_name)
        
        #3. Extraer del QR del PDF el QR con la clave cifrada
        tmp_path = "tmp/"
        qr_ciphered_path = tmp_path + "qr_random_key_ciphered.png"
        Decoder.extract_hidden_image(tmp_path + "1.png", qr_ciphered_path)

        #4. Leer ese QR extraido para obtener la clave aleatoria cifrada
        img = cv2.imread(qr_ciphered_path)
        det = cv2.QRCodeDetector()
        random_key_ciphered, pts, st_code = det.detectAndDecode(img)
        print("Random key hidden in QR: ", random_key_ciphered)

        #5. Descifrar esa clave aleatoria con la clave del usuario
        user_key = input("Introduce the user key to decrypt the random key: ")
        correct_pwd=False
        for i in range (2):
            if len(user_key)<5:
                user_key = input ("Incorrect Password, try again: ")
            else:
                AESCipher.init(user_key)
                random_key_clear = AESCipher.decrypt(random_key_ciphered)
                if(random_key_clear==""):
                    user_key = input ("Incorrect Password, try again: ")
                else:
                    correct_pwd=True
                    break
        if not correct_pwd:
            print ("Incorrect Password, maximum tries exceeded")
        else:
            print ("Correct Password")
            print("The random key in clear text is: ", random_key_clear)
            #6. Extraer el texto escondido (cifrado) en la imagen 
            image_ciphered_path = tmp_path + "2.png"
            text_ciphered = TextDecoder.leer(image_ciphered_path)

            #7. Descifrar el contenido de la imagen con la random_key
            AESCipher.init(random_key_clear)
            text_clear = AESCipher.decrypt(text_ciphered)
            print("\nThe secret is:\n")
            print (text_clear)
            print("\n")

        ## Remove tmp files
        rmtree("tmp")




    else:
        exit()











